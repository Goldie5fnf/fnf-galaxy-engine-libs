# CMake generated Testfile for 
# Source directory: E:/c++/libpng-libpng16
# Build directory: E:/c++/libpng-libpng16/build/m64
# 
# This file includes the relevant testing commands required for 
# testing this directory and lists subdirectories to be tested as well.
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngtest "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngtest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngtest.cmake")
  set_tests_properties(pngtest PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;702;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngtest "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngtest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngtest.cmake")
  set_tests_properties(pngtest PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;702;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngtest "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngtest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngtest.cmake")
  set_tests_properties(pngtest PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;702;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngtest "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngtest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngtest.cmake")
  set_tests_properties(pngtest PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;702;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngtest NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngvalid-gamma-16-to-8 "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-16-to-8.cmake")
  set_tests_properties(pngvalid-gamma-16-to-8 PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;709;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngvalid-gamma-16-to-8 "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-16-to-8.cmake")
  set_tests_properties(pngvalid-gamma-16-to-8 PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;709;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngvalid-gamma-16-to-8 "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-16-to-8.cmake")
  set_tests_properties(pngvalid-gamma-16-to-8 PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;709;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngvalid-gamma-16-to-8 "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-16-to-8.cmake")
  set_tests_properties(pngvalid-gamma-16-to-8 PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;709;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngvalid-gamma-16-to-8 NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngvalid-gamma-alpha-mode "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-alpha-mode.cmake")
  set_tests_properties(pngvalid-gamma-alpha-mode PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;712;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngvalid-gamma-alpha-mode "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-alpha-mode.cmake")
  set_tests_properties(pngvalid-gamma-alpha-mode PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;712;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngvalid-gamma-alpha-mode "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-alpha-mode.cmake")
  set_tests_properties(pngvalid-gamma-alpha-mode PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;712;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngvalid-gamma-alpha-mode "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-alpha-mode.cmake")
  set_tests_properties(pngvalid-gamma-alpha-mode PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;712;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngvalid-gamma-alpha-mode NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngvalid-gamma-background "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-background.cmake")
  set_tests_properties(pngvalid-gamma-background PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;715;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngvalid-gamma-background "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-background.cmake")
  set_tests_properties(pngvalid-gamma-background PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;715;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngvalid-gamma-background "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-background.cmake")
  set_tests_properties(pngvalid-gamma-background PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;715;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngvalid-gamma-background "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-background.cmake")
  set_tests_properties(pngvalid-gamma-background PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;715;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngvalid-gamma-background NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngvalid-gamma-expand16-alpha-mode "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-expand16-alpha-mode.cmake")
  set_tests_properties(pngvalid-gamma-expand16-alpha-mode PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;718;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngvalid-gamma-expand16-alpha-mode "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-expand16-alpha-mode.cmake")
  set_tests_properties(pngvalid-gamma-expand16-alpha-mode PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;718;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngvalid-gamma-expand16-alpha-mode "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-expand16-alpha-mode.cmake")
  set_tests_properties(pngvalid-gamma-expand16-alpha-mode PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;718;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngvalid-gamma-expand16-alpha-mode "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-expand16-alpha-mode.cmake")
  set_tests_properties(pngvalid-gamma-expand16-alpha-mode PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;718;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngvalid-gamma-expand16-alpha-mode NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngvalid-gamma-expand16-background "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-expand16-background.cmake")
  set_tests_properties(pngvalid-gamma-expand16-background PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;721;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngvalid-gamma-expand16-background "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-expand16-background.cmake")
  set_tests_properties(pngvalid-gamma-expand16-background PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;721;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngvalid-gamma-expand16-background "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-expand16-background.cmake")
  set_tests_properties(pngvalid-gamma-expand16-background PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;721;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngvalid-gamma-expand16-background "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-expand16-background.cmake")
  set_tests_properties(pngvalid-gamma-expand16-background PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;721;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngvalid-gamma-expand16-background NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngvalid-gamma-expand16-transform "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-expand16-transform.cmake")
  set_tests_properties(pngvalid-gamma-expand16-transform PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;724;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngvalid-gamma-expand16-transform "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-expand16-transform.cmake")
  set_tests_properties(pngvalid-gamma-expand16-transform PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;724;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngvalid-gamma-expand16-transform "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-expand16-transform.cmake")
  set_tests_properties(pngvalid-gamma-expand16-transform PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;724;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngvalid-gamma-expand16-transform "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-expand16-transform.cmake")
  set_tests_properties(pngvalid-gamma-expand16-transform PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;724;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngvalid-gamma-expand16-transform NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngvalid-gamma-sbit "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-sbit.cmake")
  set_tests_properties(pngvalid-gamma-sbit PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;727;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngvalid-gamma-sbit "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-sbit.cmake")
  set_tests_properties(pngvalid-gamma-sbit PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;727;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngvalid-gamma-sbit "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-sbit.cmake")
  set_tests_properties(pngvalid-gamma-sbit PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;727;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngvalid-gamma-sbit "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-sbit.cmake")
  set_tests_properties(pngvalid-gamma-sbit PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;727;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngvalid-gamma-sbit NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngvalid-gamma-threshold "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-threshold.cmake")
  set_tests_properties(pngvalid-gamma-threshold PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;730;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngvalid-gamma-threshold "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-threshold.cmake")
  set_tests_properties(pngvalid-gamma-threshold PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;730;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngvalid-gamma-threshold "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-threshold.cmake")
  set_tests_properties(pngvalid-gamma-threshold PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;730;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngvalid-gamma-threshold "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-threshold.cmake")
  set_tests_properties(pngvalid-gamma-threshold PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;730;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngvalid-gamma-threshold NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngvalid-gamma-transform "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-transform.cmake")
  set_tests_properties(pngvalid-gamma-transform PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;733;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngvalid-gamma-transform "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-transform.cmake")
  set_tests_properties(pngvalid-gamma-transform PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;733;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngvalid-gamma-transform "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-transform.cmake")
  set_tests_properties(pngvalid-gamma-transform PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;733;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngvalid-gamma-transform "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-gamma-transform.cmake")
  set_tests_properties(pngvalid-gamma-transform PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;733;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngvalid-gamma-transform NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngvalid-progressive-interlace-standard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-progressive-interlace-standard.cmake")
  set_tests_properties(pngvalid-progressive-interlace-standard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;736;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngvalid-progressive-interlace-standard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-progressive-interlace-standard.cmake")
  set_tests_properties(pngvalid-progressive-interlace-standard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;736;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngvalid-progressive-interlace-standard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-progressive-interlace-standard.cmake")
  set_tests_properties(pngvalid-progressive-interlace-standard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;736;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngvalid-progressive-interlace-standard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-progressive-interlace-standard.cmake")
  set_tests_properties(pngvalid-progressive-interlace-standard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;736;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngvalid-progressive-interlace-standard NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngvalid-progressive-size "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-progressive-size.cmake")
  set_tests_properties(pngvalid-progressive-size PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;739;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngvalid-progressive-size "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-progressive-size.cmake")
  set_tests_properties(pngvalid-progressive-size PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;739;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngvalid-progressive-size "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-progressive-size.cmake")
  set_tests_properties(pngvalid-progressive-size PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;739;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngvalid-progressive-size "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-progressive-size.cmake")
  set_tests_properties(pngvalid-progressive-size PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;739;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngvalid-progressive-size NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngvalid-progressive-standard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-progressive-standard.cmake")
  set_tests_properties(pngvalid-progressive-standard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;742;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngvalid-progressive-standard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-progressive-standard.cmake")
  set_tests_properties(pngvalid-progressive-standard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;742;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngvalid-progressive-standard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-progressive-standard.cmake")
  set_tests_properties(pngvalid-progressive-standard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;742;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngvalid-progressive-standard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-progressive-standard.cmake")
  set_tests_properties(pngvalid-progressive-standard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;742;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngvalid-progressive-standard NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngvalid-standard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-standard.cmake")
  set_tests_properties(pngvalid-standard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;745;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngvalid-standard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-standard.cmake")
  set_tests_properties(pngvalid-standard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;745;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngvalid-standard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-standard.cmake")
  set_tests_properties(pngvalid-standard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;745;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngvalid-standard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-standard.cmake")
  set_tests_properties(pngvalid-standard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;745;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngvalid-standard NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngvalid-transform "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-transform.cmake")
  set_tests_properties(pngvalid-transform PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;748;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngvalid-transform "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-transform.cmake")
  set_tests_properties(pngvalid-transform PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;748;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngvalid-transform "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-transform.cmake")
  set_tests_properties(pngvalid-transform PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;748;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngvalid-transform "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngvalid.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngvalid-transform.cmake")
  set_tests_properties(pngvalid-transform PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;748;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngvalid-transform NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngstest-1.8-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-1.8-none.cmake")
  set_tests_properties(pngstest-1.8-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngstest-1.8-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-1.8-none.cmake")
  set_tests_properties(pngstest-1.8-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngstest-1.8-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-1.8-none.cmake")
  set_tests_properties(pngstest-1.8-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngstest-1.8-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-1.8-none.cmake")
  set_tests_properties(pngstest-1.8-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngstest-1.8-none NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngstest-1.8-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-1.8-alpha.cmake")
  set_tests_properties(pngstest-1.8-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngstest-1.8-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-1.8-alpha.cmake")
  set_tests_properties(pngstest-1.8-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngstest-1.8-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-1.8-alpha.cmake")
  set_tests_properties(pngstest-1.8-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngstest-1.8-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-1.8-alpha.cmake")
  set_tests_properties(pngstest-1.8-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngstest-1.8-alpha NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngstest-linear-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-linear-none.cmake")
  set_tests_properties(pngstest-linear-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngstest-linear-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-linear-none.cmake")
  set_tests_properties(pngstest-linear-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngstest-linear-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-linear-none.cmake")
  set_tests_properties(pngstest-linear-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngstest-linear-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-linear-none.cmake")
  set_tests_properties(pngstest-linear-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngstest-linear-none NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngstest-linear-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-linear-alpha.cmake")
  set_tests_properties(pngstest-linear-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngstest-linear-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-linear-alpha.cmake")
  set_tests_properties(pngstest-linear-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngstest-linear-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-linear-alpha.cmake")
  set_tests_properties(pngstest-linear-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngstest-linear-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-linear-alpha.cmake")
  set_tests_properties(pngstest-linear-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngstest-linear-alpha NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngstest-none-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-none-none.cmake")
  set_tests_properties(pngstest-none-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngstest-none-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-none-none.cmake")
  set_tests_properties(pngstest-none-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngstest-none-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-none-none.cmake")
  set_tests_properties(pngstest-none-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngstest-none-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-none-none.cmake")
  set_tests_properties(pngstest-none-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngstest-none-none NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngstest-none-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-none-alpha.cmake")
  set_tests_properties(pngstest-none-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngstest-none-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-none-alpha.cmake")
  set_tests_properties(pngstest-none-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngstest-none-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-none-alpha.cmake")
  set_tests_properties(pngstest-none-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngstest-none-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-none-alpha.cmake")
  set_tests_properties(pngstest-none-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngstest-none-alpha NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngstest-sRGB-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-sRGB-none.cmake")
  set_tests_properties(pngstest-sRGB-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngstest-sRGB-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-sRGB-none.cmake")
  set_tests_properties(pngstest-sRGB-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngstest-sRGB-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-sRGB-none.cmake")
  set_tests_properties(pngstest-sRGB-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngstest-sRGB-none "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-sRGB-none.cmake")
  set_tests_properties(pngstest-sRGB-none PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngstest-sRGB-none NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngstest-sRGB-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-sRGB-alpha.cmake")
  set_tests_properties(pngstest-sRGB-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngstest-sRGB-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-sRGB-alpha.cmake")
  set_tests_properties(pngstest-sRGB-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngstest-sRGB-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-sRGB-alpha.cmake")
  set_tests_properties(pngstest-sRGB-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngstest-sRGB-alpha "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngstest.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngstest-sRGB-alpha.cmake")
  set_tests_properties(pngstest-sRGB-alpha PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;800;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngstest-sRGB-alpha NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngunknown-discard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-discard.cmake")
  set_tests_properties(pngunknown-discard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;810;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngunknown-discard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-discard.cmake")
  set_tests_properties(pngunknown-discard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;810;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngunknown-discard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-discard.cmake")
  set_tests_properties(pngunknown-discard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;810;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngunknown-discard "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-discard.cmake")
  set_tests_properties(pngunknown-discard PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;810;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngunknown-discard NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngunknown-IDAT "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-IDAT.cmake")
  set_tests_properties(pngunknown-IDAT PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;814;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngunknown-IDAT "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-IDAT.cmake")
  set_tests_properties(pngunknown-IDAT PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;814;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngunknown-IDAT "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-IDAT.cmake")
  set_tests_properties(pngunknown-IDAT PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;814;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngunknown-IDAT "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-IDAT.cmake")
  set_tests_properties(pngunknown-IDAT PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;814;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngunknown-IDAT NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngunknown-if-safe "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-if-safe.cmake")
  set_tests_properties(pngunknown-if-safe PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;818;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngunknown-if-safe "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-if-safe.cmake")
  set_tests_properties(pngunknown-if-safe PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;818;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngunknown-if-safe "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-if-safe.cmake")
  set_tests_properties(pngunknown-if-safe PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;818;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngunknown-if-safe "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-if-safe.cmake")
  set_tests_properties(pngunknown-if-safe PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;818;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngunknown-if-safe NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngunknown-sAPI "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-sAPI.cmake")
  set_tests_properties(pngunknown-sAPI PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;822;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngunknown-sAPI "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-sAPI.cmake")
  set_tests_properties(pngunknown-sAPI PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;822;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngunknown-sAPI "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-sAPI.cmake")
  set_tests_properties(pngunknown-sAPI PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;822;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngunknown-sAPI "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-sAPI.cmake")
  set_tests_properties(pngunknown-sAPI PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;822;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngunknown-sAPI NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngunknown-save "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-save.cmake")
  set_tests_properties(pngunknown-save PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;826;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngunknown-save "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-save.cmake")
  set_tests_properties(pngunknown-save PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;826;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngunknown-save "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-save.cmake")
  set_tests_properties(pngunknown-save PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;826;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngunknown-save "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-save.cmake")
  set_tests_properties(pngunknown-save PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;826;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngunknown-save NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngunknown-sTER "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-sTER.cmake")
  set_tests_properties(pngunknown-sTER PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;830;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngunknown-sTER "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-sTER.cmake")
  set_tests_properties(pngunknown-sTER PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;830;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngunknown-sTER "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-sTER.cmake")
  set_tests_properties(pngunknown-sTER PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;830;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngunknown-sTER "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-sTER.cmake")
  set_tests_properties(pngunknown-sTER PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;830;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngunknown-sTER NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngunknown-vpAg "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-vpAg.cmake")
  set_tests_properties(pngunknown-vpAg PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;834;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngunknown-vpAg "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-vpAg.cmake")
  set_tests_properties(pngunknown-vpAg PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;834;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngunknown-vpAg "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-vpAg.cmake")
  set_tests_properties(pngunknown-vpAg PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;834;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngunknown-vpAg "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngunknown.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngunknown-vpAg.cmake")
  set_tests_properties(pngunknown-vpAg PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;834;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngunknown-vpAg NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngimage-quick "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngimage.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngimage-quick.cmake")
  set_tests_properties(pngimage-quick PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;842;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngimage-quick "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngimage.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngimage-quick.cmake")
  set_tests_properties(pngimage-quick PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;842;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngimage-quick "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngimage.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngimage-quick.cmake")
  set_tests_properties(pngimage-quick PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;842;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngimage-quick "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngimage.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngimage-quick.cmake")
  set_tests_properties(pngimage-quick PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;842;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngimage-quick NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(pngimage-full "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Debug/libpng16d.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Debug/pngimage.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngimage-full.cmake")
  set_tests_properties(pngimage-full PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;846;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(pngimage-full "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/Release/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/Release/pngimage.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngimage-full.cmake")
  set_tests_properties(pngimage-full PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;846;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(pngimage-full "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/MinSizeRel/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/MinSizeRel/pngimage.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngimage-full.cmake")
  set_tests_properties(pngimage-full PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;846;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(pngimage-full "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe" "-DLIBPNG=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/libpng16.dll" "-DTEST_COMMAND=E:/c++/libpng-libpng16/build/m64/RelWithDebInfo/pngimage.exe" "-P" "E:/c++/libpng-libpng16/build/m64/tests/pngimage-full.cmake")
  set_tests_properties(pngimage-full PROPERTIES  _BACKTRACE_TRIPLES "E:/c++/libpng-libpng16/CMakeLists.txt;682;add_test;E:/c++/libpng-libpng16/CMakeLists.txt;846;png_add_test;E:/c++/libpng-libpng16/CMakeLists.txt;0;")
else()
  add_test(pngimage-full NOT_AVAILABLE)
endif()
